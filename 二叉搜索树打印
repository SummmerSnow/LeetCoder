'''
题目描述：

    给定二叉搜索树的前序遍历，
    给出二叉搜索树，按照从上到下，从左到右的顺序打印的结构
'''

# 根据平衡二叉树的前项，输出从左到右打印


class Node(object):
    def __init__(self, left, right, val):
        self.left = left
        self.right = right
        self.val = val

a = [8, 3, 1, 6, 10, 14, 16]


def constrct_Tree(a, s, e):

    if s==e:
        return Node(None, None, a[s])

    if s > e:
        return None

    root = Node(None, None, a[s])

    r = e
    while(a[r] > a[s]):
        r -= 1

    if r < e:
        root.right = constrct_Tree(a, r+1, e)
        root.left = constrct_Tree(a, s+1, r)
    else:
        root.right = None
        root.left = constrct_Tree(a, s+1, r)

    return root

def printt(root, n):
    if root is None:
        return

    b = [root]
    index = 0
    while(index < n):
        a = b[index]
        x = a.val
        print(x)

        if a.left is not None:
            b.append(a.left)
        if a.right is not None:
            b.append(a.right)
        index += 1




root = constrct_Tree(a, 0, len(a)-1)
printt(root, len(a))
